{"version":3,"sources":["Components/Calculator.tsx","App.tsx","index.tsx"],"names":["ACTIONS","REGEX","SINGLE_OP","RegExp","SINGLE_NUMBER","OP_NUMBER","FINAL_OPS","NUMBERS","OPERATIONS","FIRST_ORDER","Calculator","useState","topText","displayText","previousAction","decimalAdded","evalResult","calcState","setCalcState","useEffect","handleKeyPress","props","test","key","addNumber","addOperation","evaluate","clear","document","addEventListener","removeEventListener","number","length","operation","match","topReplaced","replace","slice","numbers","split","filter","elem","map","parseFloat","operations","shift","i","result","firstOrderOp","secondOrderOp","String","first","op","second","className","id","Button","onClick","variant","color","App","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e50ef6c9.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Calculator.css';\r\n\r\n// Calculator actions\r\nconst ACTIONS = {\r\n  CLEAR: \"NONE\",\r\n  OPERATION: \"OPERATION\",\r\n  EVAL: \"EVAL\",\r\n  NUMBER: \"NUMBER\",\r\n  DECIMAL: \"DECIMAL\"\r\n};\r\n\r\nconst REGEX = {\r\n  SINGLE_OP: new RegExp('^[-+xX*/]{1}'),\r\n  SINGLE_NUMBER: new RegExp('^[0-9]{1}'),\r\n  // One operation and at least one number\r\n  OP_NUMBER: new RegExp('^[-+xX*/]{1}[0-9]{1,}'),\r\n  FINAL_OPS: /[-+/*xX]{1,}$/g,\r\n  NUMBERS: /[-+/xX*]{1,}/g,\r\n  OPERATIONS: /[^-+/xX*]{1,}/g,\r\n  FIRST_ORDER: new RegExp('[xX*/]')\r\n};\r\n\r\n\r\nfunction Calculator() {\r\n  const [calcState, setCalcState] = useState({\r\n    topText: \"\",\r\n    displayText: \"0\",\r\n    previousAction: ACTIONS.CLEAR,\r\n    decimalAdded:false,\r\n    evalResult: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleKeyPress(props: { key: string; }) {\r\n      if (REGEX.SINGLE_NUMBER.test(props.key)) { addNumber(props.key); }\r\n      else if (REGEX.SINGLE_OP.test(props.key)) { addOperation(props.key); }\r\n      else if (props.key === \"Enter\") { evaluate(); }\r\n      else if (props.key === \"Escape\") { clear(); }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n    return function cleanup() {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  });\r\n\r\n  const clear = () => {\r\n    setCalcState({\r\n      topText: \"\",\r\n      displayText: \"0\",\r\n      previousAction: ACTIONS.CLEAR,\r\n      decimalAdded:false,\r\n      evalResult: \"\"\r\n    });\r\n  }\r\n\r\n  const addNumber = (number: string) => {\r\n    // If there is only a 0 in display, do not allow user to add another 0\r\n    if (calcState.topText.length > 0 && calcState.displayText === \"0\" && number === \"0\") { return; }\r\n    // Initialized\r\n    if (calcState.previousAction === ACTIONS.CLEAR || calcState.previousAction === ACTIONS.EVAL) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: number,\r\n        displayText: number,\r\n        previousAction: ACTIONS.NUMBER\r\n      });\r\n    }\r\n    // Number - Append to current number\r\n    else if (calcState.previousAction === ACTIONS.NUMBER || calcState.previousAction === ACTIONS.DECIMAL) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + number,\r\n        displayText: calcState.displayText + number,\r\n        previousAction: ACTIONS.NUMBER\r\n      });\r\n    }\r\n    // Operation - Append to top but reset display\r\n    else if (calcState.previousAction === ACTIONS.OPERATION) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + number,\r\n        displayText: number,\r\n        previousAction: ACTIONS.NUMBER\r\n      });\r\n    }\r\n  }\r\n\r\n  // Avoid adding multiple decimals in one real number\r\n  const addDecimal = () => {\r\n    if (!calcState.decimalAdded) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText.length === 0 ? \"0.\" : calcState.topText + \".\",\r\n        displayText: calcState.displayText + \".\",\r\n        previousAction: ACTIONS.DECIMAL,\r\n        decimalAdded: true\r\n      });\r\n    }\r\n  }\r\n\r\n  const addOperation = (operation: string) => {\r\n    if (calcState.previousAction !== ACTIONS.OPERATION) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.previousAction === ACTIONS.EVAL ? calcState.evalResult + operation : calcState.topText + operation,\r\n        displayText: operation,\r\n        previousAction: ACTIONS.OPERATION,\r\n        decimalAdded: false\r\n      });\r\n    }\r\n    else {\r\n      const topText = calcState.topText.match(REGEX.FINAL_OPS);\r\n      // Case 1 - Operation is the first element in display, replace operation in both top and display\r\n      if (calcState.topText.length === 1) {\r\n        setCalcState({\r\n          ...calcState,\r\n          topText: operation,\r\n          displayText: operation\r\n        });\r\n      }\r\n      // Case 2 - Operation is subtract (which can be negative) AND current length of operations is 1, append current operation\r\n      else if (operation === \"-\" && topText && topText[0].length === 1) {\r\n        setCalcState({\r\n          ...calcState,\r\n          topText: calcState.topText + operation,\r\n          displayText: operation\r\n        });\r\n      }\r\n      // Case 3 - Any other operation, replace previously queued operations\r\n      else if (operation !== \"-\") {\r\n        let topReplaced = calcState.topText.replace(REGEX.FINAL_OPS, \"\");\r\n        setCalcState({\r\n          ...calcState,\r\n          topText: topReplaced + operation,\r\n          displayText: operation\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const evaluate = () => {\r\n    // If already evaluated, early return\r\n    if (calcState.previousAction === ACTIONS.EVAL) { return; }\r\n\r\n    // Containing one operation and a range of numbers\r\n    if (REGEX.OP_NUMBER.test(calcState.topText)) {\r\n      calcState.topText[0] === \"-\" ? setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + \"=\" + calcState.topText,\r\n        displayText: calcState.topText,\r\n        previousAction: ACTIONS.EVAL,\r\n        evalResult: calcState.topText\r\n      }) : setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + \"=\" + calcState.topText.slice(1),\r\n        displayText: calcState.topText.slice(1),\r\n        previousAction: ACTIONS.EVAL,\r\n        evalResult: calcState.topText.slice(1)\r\n      });\r\n    }\r\n    // If empty or only an operation, return \"NAN\"\r\n    else if (calcState.topText.length === 0 || REGEX.SINGLE_OP.test(calcState.topText) || calcState.evalResult === \"NAN\") {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + \"=NAN\",\r\n        displayText: \"NAN\",\r\n        previousAction: ACTIONS.EVAL,\r\n        evalResult: \"NAN\"\r\n      });\r\n      return;\r\n    }\r\n    else if (REGEX.SINGLE_NUMBER.test(calcState.topText)) {\r\n      setCalcState({\r\n        ...calcState,\r\n        topText: calcState.topText + \"=\" + calcState.topText,\r\n        previousAction: ACTIONS.EVAL,\r\n        evalResult: calcState.displayText\r\n      });\r\n    }\r\n    \r\n    // Handle decimals\r\n    let numbers = calcState.topText.split(REGEX.NUMBERS).filter(elem => elem.length > 0).map(elem => parseFloat(elem));\r\n    let operations = calcState.topText.split(REGEX.OPERATIONS);\r\n    \r\n    // See if first operation flips sign for first element\r\n    if (operations[0] === \"-\") { numbers[0] *= -1; }\r\n    operations.shift();\r\n\r\n    // Iterate and execute first-order operations first\r\n    for (let i = 0; i < operations.length; ++i) {\r\n      if (REGEX.FIRST_ORDER.test(operations[i])) {\r\n        // Differentiate between whether the current operations flips the sign for the second number\r\n        let result = operations[i].length === 2 \r\n          ? firstOrderOp(numbers[i], operations[i][0], numbers[i + 1] * -1.0)\r\n          : firstOrderOp(numbers[i], operations[i], numbers[i + 1]);\r\n        numbers = [...numbers.slice(0, i), result, ...numbers.slice(i + 2)];\r\n        operations = [...operations.slice(0, i), ...operations.slice(i + 1)];\r\n        --i;\r\n      }\r\n    }\r\n\r\n    // Check if there are any more operations to perform\r\n    if (numbers.length > 1) {\r\n      for (let i = 0; i < operations.length; ++i) {\r\n        let result = operations[i].length === 2\r\n          ? secondOrderOp(numbers[i], operations[i][0], numbers[i + 1] * -1.0)\r\n          : secondOrderOp(numbers[i], operations[i], numbers[i + 1]);\r\n        numbers = [...numbers.slice(0, i), result, ...numbers.slice(i + 2)];\r\n        operations = [...operations.slice(0, i), ...operations.slice(i + 1)];\r\n        --i;\r\n      }\r\n    }\r\n    setCalcState({\r\n      ...calcState,\r\n      topText: calcState.topText + \"=\" + numbers[0],\r\n      displayText: String(numbers[0]),\r\n      previousAction: ACTIONS.EVAL,\r\n      evalResult: String(numbers[0])\r\n    });\r\n  }\r\n\r\n  // First order is multiplication/division\r\n  const firstOrderOp = (first: number, op: string, second: number) => {\r\n    if (!second) { return first; }\r\n    else if (op === \"/\") { return first / second; }\r\n    else { return first * second; }\r\n  }\r\n\r\n  // Second order is addition/subtraction\r\n  const secondOrderOp = (first: number, op: string, second: number) => {\r\n    if (!second) { return first; }\r\n    else if (op === \"+\") { return first + second; }\r\n    else { return first - second; }\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <div id=\"top\">{calcState.topText}</div>\r\n      <div id=\"display\">{calcState.displayText}</div>\r\n      <Button id=\"clear\" onClick={() => clear()} variant=\"contained\" color=\"secondary\">AC</Button>\r\n      <Button id=\"divide\" onClick={() => addOperation(\"/\")} variant=\"contained\">/</Button>\r\n      <Button id=\"multiply\" onClick={() => addOperation(\"*\")} variant=\"contained\">x</Button>\r\n      <Button id=\"seven\" onClick={() => addNumber(\"7\")} variant=\"contained\">7</Button>\r\n      <Button id=\"eight\" onClick={() => addNumber(\"8\")} variant=\"contained\">8</Button>\r\n      <Button id=\"nine\" onClick={() => addNumber(\"9\")} variant=\"contained\">9</Button>\r\n      <Button id=\"subtract\" onClick={() => addOperation(\"-\")} variant=\"contained\">-</Button>\r\n      <Button id=\"four\" onClick={() => addNumber(\"4\")} variant=\"contained\">4</Button>\r\n      <Button id=\"five\" onClick={() => addNumber(\"5\")} variant=\"contained\">5</Button>\r\n      <Button id=\"six\" onClick={() => addNumber(\"6\")} variant=\"contained\">6</Button>\r\n      <Button id=\"add\" onClick={() => addOperation(\"+\")} variant=\"contained\">+</Button>\r\n      <Button id=\"one\" onClick={() => addNumber(\"1\")} variant=\"contained\">1</Button>\r\n      <Button id=\"two\" onClick={() => addNumber(\"2\")} variant=\"contained\">2</Button>\r\n      <Button id=\"three\" onClick={() => addNumber(\"3\")} variant=\"contained\">3</Button>\r\n      <Button id=\"equals\" onClick={() => evaluate()} variant=\"contained\" color=\"primary\">=</Button>\r\n      <Button id=\"zero\" onClick={() => addNumber(\"0\")} variant=\"contained\">0</Button>\r\n      <Button id=\"decimal\" onClick={() => addDecimal()} variant=\"contained\">.</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport Calculator from './Components/Calculator';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  render() { \r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"header\">Calculator</div>\r\n        <Calculator />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}